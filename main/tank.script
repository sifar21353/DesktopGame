function init(self)
	-- Defining the equation: current set to 1x^2 + 4x + 0
	eq = {1, 4, 0}
	-- Finding out the roots of the equation
	root1 = (-eq[2] + math.sqrt(eq[2] * eq[2] - 4 * eq[1] * eq[3])) / (2 * eq[1])
	root2 = (-eq[2] - math.sqrt(eq[2] * eq[2] - 4 * eq[1] * eq[3])) / (2 * eq[1])
	-- Setting the right increment
	difference = math.abs(((root1 + root2) / 2) * ((root1 + root2) / 2) * eq[1] + ((root1 + root2) / 2) * eq[2] + eq[3])
	window_x, window_y = window.get_size()
	window_x = window_x / 2
	window_y = window_y / 2
	increment = (math.abs(root1 - root2)) / (window_x / 10)
	mulitiplier = 1 / increment
	points = {}
	-- Generating points
	for i = root2, root1, increment do
		points[(i + (math.abs(root1 - root2))) * mulitiplier] = (i * i * eq[1] + i * eq[2] + eq[3]) + difference
	end
	adjusting_to_720 = window_y / points[(window_x / 10)]
	for k, v in pairs(points) do
		points[k] = points[k] * adjusting_to_720
	end
<<<<<<< HEAD
	for i = 0, window_x / 10, 1 do
		pos = go.get_position()
		x_additive = i * 10 - pos.x
		pos.x = pos.x + x_additive
		y_additive = points[i] - pos.y
		pos.y = pos.y + y_additive
		go.set_position(pos)
	end
=======
>>>>>>> parent of 7077e66 (Moved movement to init())
end

function update(self, dt)
	pos_init = go.get_position()
	if pos_init.x < window_x then do
		for i = 0, window_x / 10, 1 do
			pos = go.get_position()
			x_additive = i * 10 - pos.x
			pos.x = pos.x + x_additive
			y_additive = points[i] - pos.y
			pos.y = pos.y + y_additive
			go.set_position(pos)
			print(pos)
		end
	end
end
end